import { checkLength, mixedENTW, hasSpecialChar, hasEmoji } from '../../src/until/validate/function'

describe('checkLength', () => {
  const chLimit = 12
  const enLimit = 20
  it('english is too more', () => {
    const inputStr = 'wdqwdwqwdqdqwqdqwdqwdwqdqwdqw'
    expect(checkLength(inputStr, chLimit, enLimit)).toBe(false)
  })
  it('chinese is too more', () => {
    const inputStr = 'æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦'
    expect(checkLength(inputStr, chLimit, enLimit)).toBe(false)
  })
  it('english is normal', () => {
    const inputStr = 'wdqwdwqwdqdq'
    expect(checkLength(inputStr, chLimit, enLimit)).toBe(true)
  })
  it('chinese is normal', () => {
    const inputStr = 'è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦'
    expect(checkLength(inputStr, chLimit, enLimit)).toBe(true)
  })
})

describe('mixedENTW', () => {
  it('ä¸­è‹±æ··', () => {
    const inputStr = 'è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦eded'
    expect(mixedENTW(inputStr)).toBe(false)
  })
  it('å–®è‹±', () => {
    const inputStr = 'eded'
    expect(mixedENTW(inputStr)).toBe(true)
  })
  it('å–®ä¸­', () => {
    const inputStr = 'è©¦æ¸¬è©¦æ¸¬è©¦æ¸¬è©¦'
    expect(mixedENTW(inputStr)).toBe(true)
  })
})

describe('hasSpecialChar', () => {
  it('æœ‰ç‰¹æ®Šå­—å…ƒ', () => {
    const inputStr = 'de[][][@!~de'
    expect(hasSpecialChar(inputStr)).toBe(false)
  })
  it('æ­£å¸¸', () => {
    const inputStr = 'de'
    expect(hasSpecialChar(inputStr)).toBe(true)
  })
})

describe('hasEmoji', () => {
  it('æœ‰è¡¨æƒ…ç¬¦è™Ÿ', () => {
    const inputStr = 'ðŸ’°ðŸ’°'
    expect(hasEmoji(inputStr)).toBe(false)
  })
  it('æ­£å¸¸', () => {
    const inputStr = 'de'
    expect(hasEmoji(inputStr)).toBe(true)
  })
})
